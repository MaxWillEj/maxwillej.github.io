import React, { Component } from 'react'
import { FlexCol } from './FlexCol'
import { FlexRow } from './FlexRow'
import { Label } from './Label'
import { i18n } from '../_helpers'
import { Checkbox } from './Checkbox'
import { ThinBorder } from './ThinBorder'
import styled from 'styled-components'
import LazyLoader from './LazyLoader'
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'
import _ from 'lodash'

const defaultStyleCheckbox = {
  width: '44px',
  height: '44px',
  flex: 'none',
  display: 'flex'
}
const defaultStyleFirst = {
  whitespace: 'no-break',
  flex: '5',
  minHeight: '60px'
}
const defaultStyleOthers = {
  whitespace: 'no-break',
  flex: '3',
  minHeight: '60px'
}
const noBorderRowStyle = {
  padding: '0 40px 0 40px',
  minHeight: '61px',
  lineHeight: '19px'
}

const columnLabelStyle = {
  height: '44px',
  minHeight: '44px',
  lineHeight: '44px',
  fontWeight: '400',
  color: '#646b7d',
  whiteSpace: 'nowrap',
  overflow: 'hidden',
  textOverflow: 'ellipsis'
}
const columnComponentStyle = {
  height: '44px',
  boxSizing: 'border-box',
  display: 'flex',
  alignItems: 'center',
  flex: '0.5 1 0%'
}

const EmptyMessage = styled.div`
  margin: 20px 0;
  text-align: center;
  color: #999;
  font-size: 14px;
`

// fake data generator
// const getItems = count =>
//   Array.from({ length: count }, (v, k) => k).map(k => ({
//     id: `item-${k}`,
//     content: `item ${k}`
//   }))

// a little function to help us with reordering the result
const reorder = (list, startIndex, endIndex) => {
  const result = Array.from(list)
  const [removed] = result.splice(startIndex, 1)
  result.splice(endIndex, 0, removed)

  return result
}

// const grid = 8

const getItemStyle = (isDragging, draggableStyle) => ({
  // some basic styles to make the items look a bit nicer
  userSelect: 'none',
  // padding: grid * 2,
  // margin: `0 0 ${grid}px 0`,

  // change background colour if dragging
  background: isDragging ? 'lightgreen' : 'white',

  // styles we need to apply on draggables
  ...draggableStyle
})

const getListStyle = isDraggingOver => ({
  // background: isDraggingOver ? 'lightblue' : 'white'
  // padding: grid
  // width: 250
})

export class DraggableTable extends Component {
  /**
   * https://reactjs.org/docs/react-component.html#static-getderivedstatefromprops
   * It should return an object to update the state, or null to update nothing.
   */
  static getDerivedStateFromProps(props, state) {
    if (
      !state.columnStyles ||
      state.columnStyles.length !== props.columns.length
    ) {
      const columnStyles = props.columns.map((column, index) => {
        return {
          ...(index === 0 ? defaultStyleFirst : defaultStyleOthers),
          ...column.style
        }
      })

      const columns = [...props.columns]

      if (props.onSelect) {
        columnStyles.unshift(defaultStyleCheckbox)
        columns.unshift({
          name: 'onSelect.checkbox',
          component: () => {
            return (
              <Checkbox
                selected={props.allSelected} // TODO real value
                onClick={() => {
                  props.onSelect(!props.allSelected) // TODO real value
                }}
              />
            )
          }
        })
      }

      return { columnStyles, columns, items: props.rows }
    }

    if (
      !_.isEqual(props.rows, state.items) ||
      (props.rows && props.rows.length) !== (state.items && state.items.length)
    ) {
      return { items: props.rows }
    }
    return null
  }

  state = {
    columnStyles: null
  }

  _renderColumn = (column, index) => {
    return !column.component ? (
      <Label
        key={column.name}
        style={{
          ...this.state.columnStyles[index],
          ...columnLabelStyle
        }}
      >
        {this.props.i18nNamespace
          ? i18n.t(this.props.i18nNamespace + column.name)
          : column.name}
      </Label>
    ) : (
      <div
        key={column.name}
        style={{
          ...columnComponentStyle,
          ...this.state.columnStyles[index]
        }}
      >
        {column.component()}
      </div>
    )
  }

  onDragEnd = async result => {
    // dropped outside the list
    if (!result.destination) {
      return
    }

    const myItems = this.state.items || this.props.rows

    const items = reorder(
      myItems,
      result.source.index,
      result.destination.index
    )

    this.setState({ items })

    if (this.props.onDrop) {
      await this.props.onDrop(
        myItems[result.source.index],
        result.destination.index
      )
    }
  }

  render() {
    const itemsList = this.props.rows ? this.state.items || this.props.rows : []
    return this.props.rows && this.props.rows.length > 0 ? (
      <DragDropContext onDragEnd={this.onDragEnd}>
        <Droppable droppableId="droppable">
          {(provided, snapshot) => (
            <div
              {...provided.droppableProps}
              ref={provided.innerRef}
              style={getListStyle(snapshot.isDraggingOver)}
            >
              <FlexCol
                style={{
                  margin: '0',
                  padding: '0',
                  fontSize: '18px',
                  color: '#3f4658',
                  ...this.props.style
                }}
              >
                <FlexRow
                  style={{
                    padding: '0 40px 0 40px',
                    position: 'relative'
                  }}
                >
                  {this.state.columns.map(this._renderColumn)}
                  <ThinBorder />
                </FlexRow>
                {this.props.lazyLoad ? (
                  <LazyLoader
                    dataList={this.props.rows}
                    renderer={(row, index) => {
                      return this.props.renderer(
                        row,
                        index,
                        noBorderRowStyle,
                        this.state.columnStyles
                      )
                    }}
                    itemSize={this.props.itemSize}
                    offsetTop={this.props.offsetTop}
                  />
                ) : (
                  itemsList.map((row, index) => {
                    return (
                      <Draggable
                        key={row.id}
                        draggableId={row.id}
                        index={index}
                        isDragDisabled={!this.props.dragAndDrop}
                      >
                        {(provided, snapshot) => (
                          <div
                            ref={provided.innerRef}
                            {...provided.draggableProps}
                            {...provided.dragHandleProps}
                            style={getItemStyle(
                              snapshot.isDragging,
                              provided.draggableProps.style
                            )}
                          >
                            <FlexCol
                              key={`Table.row${row.id}`}
                              style={{ position: 'relative' }}
                            >
                              {this.props.renderer(
                                row,
                                index,
                                noBorderRowStyle,
                                this.state.columnStyles
                              )}
                              {(!this.props.noBorderLastChild ||
                                index < this.props.rows.length - 1) && (
                                <ThinBorder />
                              )}
                            </FlexCol>
                          </div>
                        )}
                      </Draggable>
                    )
                  })
                )}
              </FlexCol>
              {provided.placeholder}
            </div>
          )}
        </Droppable>
      </DragDropContext>
    ) : (
      <EmptyMessage>
        {this.props.emptyMessage || i18n.t('table.no_rows')}
      </EmptyMessage>
    )
  }
}
