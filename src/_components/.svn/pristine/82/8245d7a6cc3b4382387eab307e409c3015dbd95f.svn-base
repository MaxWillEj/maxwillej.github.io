import React from 'react'
import { FlexRow } from './FlexRow'
import { StateComponent } from './base/StateComponent'
import { Dropdown } from './Dropdown'
import styled from 'styled-components'
import iconDecrease from '../images/icons/decrease.svg'
import iconIncrease from '../images/icons/increase.svg'
import { Image } from './Image'
import { isFinite } from 'lodash'
import { Input } from './Input'
import { i18n, history, PATH } from '../_helpers'
import { Label } from './Label'
import { Biz } from '../_biz/Biz'
import { Avatar } from './Avatar'

const InputContainer = styled.div`
  flex: 1;
  position: relative;
  margin: 0 15px 0 0;
`

const PlusMinusButton = styled(Image)`
  padding: 8px;
  border-radius: 8px;
  position: absolute;
  top: calc(50% - 13px);
  right: 12px;
  background: #e8f5fa;
  cursor: ${props => (props.enabled ? 'pointer' : 'default')};
  opacity: ${props => (props.enabled ? '1' : '0.5')};
  transition: background-color 0.2s ease-in-out;

  &:hover {
    background: ${props => (props.enabled ? '#e4f0f5' : '#e8f5fa')};
  }
`

const DaysLabel = styled(Label)`
  position: absolute;
  bottom: 3px;
  left: 15px;
  color: #888;
  font-weight: 400;
  text-transform: uppercase;
  font-size: 10px;
`

const DAY_IN_MINUTES = 60 * 24
const MIN_DAYS_IN_MINUTES = 1 * DAY_IN_MINUTES // 1 day
const MAX_DAYS_IN_MINUTES = 365 * DAY_IN_MINUTES // 1 year

export class DeltaDateInput extends StateComponent {
  state = {
    inputError: null,
    before: true
  }

  handleDaysChange = e => {
    // remove any non-digits from the input
    let days = e.target.value.replace(/\D/g, '')

    this.setMinutes(days * DAY_IN_MINUTES)
  }

  isBefore() {
    return this.props.value.offsetMinutes < 0
  }

  setMinutes = offsetMinutes => {
    this.op.state('inputError', null)

    offsetMinutes = parseInt(offsetMinutes, 10)

    if (this.isBefore()) {
      // convert to negative number
      offsetMinutes = Math.abs(offsetMinutes) * -1
    }

    this.onChange({ offsetMinutes })
  }

  validateInput = () => {
    const offsetMinutes = Math.abs(this.props.value.offsetMinutes)

    if (!isFinite(offsetMinutes) || offsetMinutes < MIN_DAYS_IN_MINUTES) {
      this.op.state('inputError', i18n.t('delta_date_input.invalid_number'))
    }

    if (offsetMinutes > MAX_DAYS_IN_MINUTES) {
      this.op.state(
        'inputError',
        i18n.t('delta_date_input.max_days', {
          count: this.minutesToDays(MAX_DAYS_IN_MINUTES)
        })
      )
    }
  }

  getOptions = () => {
    const { mode } = this.props

    if (mode === 'Employee') {
      return [
        {
          key: '1',
          value: { field: 'hireDate', before: true },
          children: i18n.t('delta_date.before_hire_date')
        },
        {
          key: '2',
          value: { field: 'hireDate', before: false },
          children: i18n.t('delta_date.after_hire_date')
        },
        {
          key: '3',
          value: { field: 'endDate', before: true },
          children: i18n.t('delta_date.before_end_date')
        },
        {
          key: '4',
          value: { field: 'endDate', before: false },
          children: i18n.t('delta_date.after_end_date')
        }
      ]
    } else {
      // other options
      return []
    }
  }

  onChange = newData => {
    const data = {
      ...this.props.value,
      ...newData
    }

    this.props.onChange(data)
  }

  minutesToDays = minutes => {
    return Math.floor(minutes / DAY_IN_MINUTES)
  }

  render() {
    const offsetMinutes = Math.abs(this.props.value.offsetMinutes)
    const canDecrease = offsetMinutes > MIN_DAYS_IN_MINUTES
    const canIncrease = offsetMinutes < MAX_DAYS_IN_MINUTES
    const isBefore = this.props.value.offsetMinutes < 0
    const isHireDate = this.props.value.parentField === 'hireDate'
    const selectedIndex = isBefore ? (isHireDate ? 0 : 2) : isHireDate ? 1 : 3

    // NOTE: Assuming parent.type is "Employee"
    const member =
      this.props.entityParent &&
      Biz.member.getFromEmployeeId(this.props.entityParent.id)
    const user = member ? member.user : undefined

    return (
      <FlexRow style={this.props.style}>
        <InputContainer>
          <Input
            value={this.minutesToDays(offsetMinutes)}
            inputStyle={{ paddingRight: '88px' }}
            onChange={this.handleDaysChange}
            onBlur={this.validateInput}
            error={this.state.inputError}
          />
          <DaysLabel>{i18n.t('delta_date_input.label.days')}</DaysLabel>
          <PlusMinusButton
            src={iconDecrease}
            size="10px"
            enabled={canDecrease}
            style={{ right: '44px' }}
            onClick={() =>
              canDecrease && this.setMinutes(offsetMinutes - DAY_IN_MINUTES)
            }
          />
          <PlusMinusButton
            src={iconIncrease}
            size="10px"
            enabled={canIncrease}
            onClick={() =>
              canIncrease && this.setMinutes(offsetMinutes + DAY_IN_MINUTES)
            }
          />
        </InputContainer>
        <Dropdown
          selectedIndex={selectedIndex}
          onSelectItem={item => {
            this.op.state('before', item.value.before)

            this.onChange({
              parentField: item.value.field,
              field: this.props.value.field,
              offsetMinutes: item.value.before
                ? offsetMinutes * -1
                : offsetMinutes
            })
          }}
          propsList={this.getOptions()}
          style={{ flex: '1.4' }}
        />
        {user && (
          <Avatar
            style={{ marginLeft: '12px' }}
            user={user}
            onClick={() => {
              history.push(PATH.PROFILE_ID.replace(':id', user.id))
            }}
          />
        )}
      </FlexRow>
    )
  }
}
