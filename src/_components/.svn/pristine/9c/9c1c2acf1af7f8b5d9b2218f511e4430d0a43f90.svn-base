import React, { Component } from 'react'

export class Wizard extends Component {
  constructor(props) {
    super(props)

    this.state = {
      currentStep: props.step ? props.step : 0,
      stepData: {}
    }
  }

  nextStep = async stepData => {
    const { children, onNextStep } = this.props
    const { currentStep } = this.state

    if (currentStep < children.length - 1) {
      if (onNextStep) {
        await onNextStep()
      }
      this.setState({ currentStep: currentStep + 1, stepData })
    }
  }

  previousStep = stepData => {
    const { currentStep } = this.state
    if (currentStep > 0) {
      this.setState({ currentStep: currentStep - 1, stepData })
    }
  }

  setStepData = stepData => {
    this.setState({ stepData })
  }

  getStepData = () => {
    const { stepData } = this.state
    return stepData
  }

  completeWizard = (data = null) => {
    const { onWizardCompleted } = this.props
    onWizardCompleted(data)
  }

  render() {
    const { currentStep } = this.state
    const { children, stepOverride } = this.props

    let stepToRender = currentStep
    if (stepOverride) {
      stepToRender = stepOverride
    }

    const childToRender =
      children.length > 0 ? children[stepToRender] : children
    return React.cloneElement(childToRender, {
      nextStep: this.nextStep,
      previousStep: this.previousStep,
      setStepData: this.setStepData,
      getStepData: this.getStepData,
      completeWizard: this.completeWizard
    })
  }
}
