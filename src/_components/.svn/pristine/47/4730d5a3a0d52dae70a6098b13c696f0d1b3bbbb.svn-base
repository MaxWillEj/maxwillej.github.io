import React, { PureComponent } from 'react'
import { FlexRow } from './FlexRow'
import _ from 'lodash'
import ReactPhoneInput from 'react-phone-input-2'
import 'react-phone-input-2/dist/style.css'
import { Label } from './Label'
import { colors } from '../_styling'
import { AnimationDiv } from './AnimationDiv'
import { shake } from '../_animations'

const dropdownButtonStyle = {
  position: 'relative',
  border: '1px solid #949EB6',
  background: 'white',
  borderRadius: '8px',
  display: 'flex',
  justifyContent: 'center',
  width: '65px'
}

const containerStyle = {
  width: '100%',
  height: '100%',
  display: 'flex',
  flexFlow: 'row-reverse'
}

const dropdownStyle = {
  border: '1px solid #949EB6',
  borderRadius: '8px',
  top: '45px',
  left: '0',
  boxShadow: 'none',
  fontFamily: 'Nunito Sans',
  fontWeight: '600',
  letterSpacing: '0.07em',
  color: '#3F4658'
}

const inputStyle = {
  boxSizing: 'border-box',
  outline: 'none',
  margin: '0',
  height: '100%',
  fontSize: '14px',
  fontFamily: 'Nunito Sans',
  fontWeight: '600',
  letterSpacing: '0.07em',
  color: '#3F4658',
  border: '1px solid #949EB6',
  borderRadius: '8px',
  padding: '0 0 0 15px',
  flex: '1',
  marginLeft: '5px'
}

/*
  How to use:
  <PhoneInput name="phone" onChange={this.handleChange} value={this.state.phone} />
*/

export class PhoneInput extends PureComponent {
  render() {
    return (
      <FlexRow
        style={{
          position: 'relative',
          height: '44px',
          opacity: this.props.disabled ? '0.7' : '1',
          ...this.props.style
        }}
      >
        {this.props.label && (
          <Label
            style={{
              margin: '0 20px 0 0',
              fontSize: '16px',
              whiteSpace: 'nowrap'
            }}
          >
            {this.props.label}
          </Label>
        )}
        <AnimationDiv
          animationKeyframe={this.props.error ? shake : ''}
          animation={this.props.error ? '0.6s' : 'none'}
          style={{
            width: '100%',
            height: '100%',
            flex: '1',
            position: 'relative',
            marginLeft: this.props.label ? 'auto' : '',
            maxWidth: this.props.label ? '70%' : ''
          }}
        >
          <ReactPhoneInput
            autoFormat={false}
            onBlur={e => {
              if (this.parsedPhone === '+') {
                // Invoke onChange when onBlur is called and value is "+"
                this.props.onChange({
                  target: {
                    name: this.props.name,
                    value: null
                  }
                })
              }
            }}
            onChange={(phoneNumber, data) => {
              this.parsedPhone = phoneNumber

              if (!this.parsedPhone.startsWith('+')) {
                this.parsedPhone = '+' + this.parsedPhone
              }

              this.props.onChange({
                target: {
                  name: this.props.name,
                  value: this.parsedPhone
                }
              })
            }}
            containerStyle={{
              ...containerStyle,
              ...this.props.containerStyle
            }}
            buttonStyle={{
              ...dropdownButtonStyle,
              ...this.props.buttonStyle
            }}
            dropdownStyle={{
              ...dropdownStyle,
              ...this.props.dropdownStyle
            }}
            inputStyle={{
              ...inputStyle,
              ...this.props.inputStyle
            }}
            value={this.props.value || '+46'}
            {..._.omit(this.props, [
              'value',
              'style',
              'buttonStyle',
              'dropdownStyle',
              'inputStyle',
              'onChange'
            ])}
          />
          {this.props.error && (
            <Label
              style={{
                position: 'absolute',
                left: '85px',
                bottom: '2px',
                fontSize: '11px',
                fontWeight: '400',
                color: colors.RED,
                ...this.props.errorStyle
              }}
            >
              {this.props.error}
            </Label>
          )}
        </AnimationDiv>
      </FlexRow>
    )
  }
}
