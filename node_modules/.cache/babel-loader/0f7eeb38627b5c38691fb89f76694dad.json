{"ast":null,"code":"import { Component } from 'react';\nimport _ from 'lodash';\n/**\n * React Component that will handle deep comparison in shouldComponentUpdate.\n */\n\nexport class PropsComponent extends Component {\n  // TODO MAYBE have custom key: _componentUpdateFingerprint, and if this key is set then it will be used for determening if a component should update or not\n  // TODO MAYBE NOT because child-state will be irrelevant with this solution, and break component design.\n  shouldComponentUpdate(nextProps) {\n    // const className = this.__proto__.constructor.name\n    // console.log(className + '.shouldComponentUpdate', {\n    //   changedProps: !this.isEqual(nextProps, this.props),\n    //   prevProps: this.props,\n    //   nextProps: nextProps\n    // })\n    // const timestamp = Date.now()\n    if (!this.isEqual(nextProps, this.props)) {\n      // console.log(className + `.isEqual took: ${Date.now() - timestamp} ms`)\n      return true;\n    } // console.log(className + `.isEqual took: ${Date.now() - timestamp} ms`)\n\n\n    return false;\n  }\n\n  isEqual(firstObject, secondObject) {\n    return _.isEqual(firstObject, secondObject);\n  }\n\n}","map":{"version":3,"sources":["/Users/maxmagnusson/Desktop/maxwillej.github.io/src/_components/base/PropsComponent.jsx"],"names":["Component","_","PropsComponent","shouldComponentUpdate","nextProps","isEqual","props","firstObject","secondObject"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA;;;;AAGA,OAAO,MAAMC,cAAN,SAA6BF,SAA7B,CAAuC;AAC5C;AACA;AACAG,EAAAA,qBAAqB,CAACC,SAAD,EAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAI,CAAC,KAAKC,OAAL,CAAaD,SAAb,EAAwB,KAAKE,KAA7B,CAAL,EAA0C;AACxC;AACA,aAAO,IAAP;AACD,KAX8B,CAY/B;;;AACA,WAAO,KAAP;AACD;;AAEDD,EAAAA,OAAO,CAACE,WAAD,EAAcC,YAAd,EAA4B;AACjC,WAAOP,CAAC,CAACI,OAAF,CAAUE,WAAV,EAAuBC,YAAvB,CAAP;AACD;;AArB2C","sourcesContent":["import { Component } from 'react'\nimport _ from 'lodash'\n\n/**\n * React Component that will handle deep comparison in shouldComponentUpdate.\n */\nexport class PropsComponent extends Component {\n  // TODO MAYBE have custom key: _componentUpdateFingerprint, and if this key is set then it will be used for determening if a component should update or not\n  // TODO MAYBE NOT because child-state will be irrelevant with this solution, and break component design.\n  shouldComponentUpdate(nextProps) {\n    // const className = this.__proto__.constructor.name\n    // console.log(className + '.shouldComponentUpdate', {\n    //   changedProps: !this.isEqual(nextProps, this.props),\n    //   prevProps: this.props,\n    //   nextProps: nextProps\n    // })\n    // const timestamp = Date.now()\n    if (!this.isEqual(nextProps, this.props)) {\n      // console.log(className + `.isEqual took: ${Date.now() - timestamp} ms`)\n      return true\n    }\n    // console.log(className + `.isEqual took: ${Date.now() - timestamp} ms`)\n    return false\n  }\n\n  isEqual(firstObject, secondObject) {\n    return _.isEqual(firstObject, secondObject)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}