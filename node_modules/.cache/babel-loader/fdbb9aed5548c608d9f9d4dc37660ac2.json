{"ast":null,"code":"import { MountableComponent } from '../MountableComponent';\nimport _ from 'lodash';\n/**\n * React Component that will handle deep comparison in shouldComponentUpdate.\n * This Component also exposes Component.getDerivedStateFromProps() functionality by\n * checking if state.getDerivedState is set, this way we can generate derived state from a\n * non-static enviroment in the state.getDerivedState function.\n * \n * Example:\n```\nexport class MyComponent extends StateComponent {\n  state = {\n    getDerivedState: (nextProps, nextState) => {\n      const propsChanged = !this.isEqual(nextProps, this.props)\n      const stateChanged = !this.isEqual(this.state, nextState)\n      return null\n    }\n  }\n  render() {\n    return <LotsOfUI />\n  }\n}\n```\n * \n * @extends MountableComponent\n */\n\nexport class StateComponent extends MountableComponent {\n  /**\n   * https://reactjs.org/docs/react-component.html#static-getderivedstatefromprops\n   * It should return an object to update the state, or null to update nothing.\n   */\n  static getDerivedStateFromProps(nextProps, nextState) {\n    if (nextState && _.isFunction(nextState.getDerivedState)) {\n      return nextState.getDerivedState(nextProps, nextState);\n    }\n\n    return null;\n  } // TODO MAYBE have custom key: _componentUpdateFingerprint, and if this key is set then it will be used for determening if a component should update or not\n  // TODO MAYBE NOT because child-state will be irrelevant with this solution, and break component design.\n\n\n  shouldComponentUpdate(nextProps, nextState) {\n    // const className = this.__proto__.constructor.name\n    // console.log(className + '.shouldComponentUpdate', {\n    //   changedProps: !this.isEqual(nextProps, this.props),\n    //   changedState: !this.isEqual(nextState, this.state),\n    //   prevProps: this.props,\n    //   nextProps: nextProps,\n    //   prevState: this.state,\n    //   nextState: nextState\n    // })\n    // const timestamp = Date.now()\n    if (!this.isEqual(nextProps, this.props) || !this.isEqual(nextState, this.state)) {\n      // console.log(className + `.isEqual took: ${Date.now() - timestamp} ms`)\n      return true;\n    } // console.log(className + `.isEqual took: ${Date.now() - timestamp} ms`)\n\n\n    return false;\n  }\n\n  isEqual(firstObject, secondObject) {\n    return _.isEqual(firstObject, secondObject);\n  }\n\n}","map":{"version":3,"sources":["/Users/maxmagnusson/Desktop/maxwillej.github.io/src/_components/base/StateComponent.jsx"],"names":["MountableComponent","_","StateComponent","getDerivedStateFromProps","nextProps","nextState","isFunction","getDerivedState","shouldComponentUpdate","isEqual","props","state","firstObject","secondObject"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,uBAAnC;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,OAAO,MAAMC,cAAN,SAA6BF,kBAA7B,CAAgD;AACrD;;;;AAIA,SAAOG,wBAAP,CAAgCC,SAAhC,EAA2CC,SAA3C,EAAsD;AACpD,QAAIA,SAAS,IAAIJ,CAAC,CAACK,UAAF,CAAaD,SAAS,CAACE,eAAvB,CAAjB,EAA0D;AACxD,aAAOF,SAAS,CAACE,eAAV,CAA0BH,SAA1B,EAAqCC,SAArC,CAAP;AACD;;AACD,WAAO,IAAP;AACD,GAVoD,CAYrD;AACA;;;AACAG,EAAAA,qBAAqB,CAACJ,SAAD,EAAYC,SAAZ,EAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QACE,CAAC,KAAKI,OAAL,CAAaL,SAAb,EAAwB,KAAKM,KAA7B,CAAD,IACA,CAAC,KAAKD,OAAL,CAAaJ,SAAb,EAAwB,KAAKM,KAA7B,CAFH,EAGE;AACA;AACA,aAAO,IAAP;AACD,KAjByC,CAkB1C;;;AACA,WAAO,KAAP;AACD;;AAEDF,EAAAA,OAAO,CAACG,WAAD,EAAcC,YAAd,EAA4B;AACjC,WAAOZ,CAAC,CAACQ,OAAF,CAAUG,WAAV,EAAuBC,YAAvB,CAAP;AACD;;AAtCoD","sourcesContent":["import { MountableComponent } from '../MountableComponent'\nimport _ from 'lodash'\n\n/**\n * React Component that will handle deep comparison in shouldComponentUpdate.\n * This Component also exposes Component.getDerivedStateFromProps() functionality by\n * checking if state.getDerivedState is set, this way we can generate derived state from a\n * non-static enviroment in the state.getDerivedState function.\n * \n * Example:\n```\nexport class MyComponent extends StateComponent {\n  state = {\n    getDerivedState: (nextProps, nextState) => {\n      const propsChanged = !this.isEqual(nextProps, this.props)\n      const stateChanged = !this.isEqual(this.state, nextState)\n      return null\n    }\n  }\n  render() {\n    return <LotsOfUI />\n  }\n}\n```\n * \n * @extends MountableComponent\n */\nexport class StateComponent extends MountableComponent {\n  /**\n   * https://reactjs.org/docs/react-component.html#static-getderivedstatefromprops\n   * It should return an object to update the state, or null to update nothing.\n   */\n  static getDerivedStateFromProps(nextProps, nextState) {\n    if (nextState && _.isFunction(nextState.getDerivedState)) {\n      return nextState.getDerivedState(nextProps, nextState)\n    }\n    return null\n  }\n\n  // TODO MAYBE have custom key: _componentUpdateFingerprint, and if this key is set then it will be used for determening if a component should update or not\n  // TODO MAYBE NOT because child-state will be irrelevant with this solution, and break component design.\n  shouldComponentUpdate(nextProps, nextState) {\n    // const className = this.__proto__.constructor.name\n    // console.log(className + '.shouldComponentUpdate', {\n    //   changedProps: !this.isEqual(nextProps, this.props),\n    //   changedState: !this.isEqual(nextState, this.state),\n    //   prevProps: this.props,\n    //   nextProps: nextProps,\n    //   prevState: this.state,\n    //   nextState: nextState\n    // })\n    // const timestamp = Date.now()\n    if (\n      !this.isEqual(nextProps, this.props) ||\n      !this.isEqual(nextState, this.state)\n    ) {\n      // console.log(className + `.isEqual took: ${Date.now() - timestamp} ms`)\n      return true\n    }\n    // console.log(className + `.isEqual took: ${Date.now() - timestamp} ms`)\n    return false\n  }\n\n  isEqual(firstObject, secondObject) {\n    return _.isEqual(firstObject, secondObject)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}