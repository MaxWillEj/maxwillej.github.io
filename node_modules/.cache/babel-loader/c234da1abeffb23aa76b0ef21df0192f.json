{"ast":null,"code":"import _classCallCheck from\"/Users/maxmagnusson/Desktop/landing-react/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/maxmagnusson/Desktop/landing-react/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/maxmagnusson/Desktop/landing-react/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/maxmagnusson/Desktop/landing-react/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/maxmagnusson/Desktop/landing-react/node_modules/@babel/runtime/helpers/esm/inherits\";import _ from'lodash';import{Component}from'react';export var MountableComponent=/*#__PURE__*/function(_Component){_inherits(MountableComponent,_Component);function MountableComponent(){var _getPrototypeOf2;var _this;_classCallCheck(this,MountableComponent);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(MountableComponent)).call.apply(_getPrototypeOf2,[this].concat(args)));_this._unmounted=true;_this.op={log:function log(value1,value2,value3,value4,value5){if(value1===undefined){console.log(_this.__proto__.constructor.name,_this.state);}else if(value2===undefined){console.log(_this.__proto__.constructor.name,value1);}else if(value3===undefined){console.log(_this.__proto__.constructor.name,value1,value2);}else if(value4===undefined){console.log(_this.__proto__.constructor.name,value1,value2,value3);}else if(value5===undefined){console.log(_this.__proto__.constructor.name,value1,value2,value3,value4);}else{console.warn(_this.__proto__.constructor.name,'MAX_ARGS',value1,value2,value3,value4,value5);}},/**\n     * Performs a deep comparison between two values to determine if they are equivalent.\n     * @param firstValue The first value to compare.\n     * @param secondValue The second value to compare.\n     */equal:function equal(firstValue,secondValue){return _.isEqual(firstValue,secondValue);},/**\n     * Creates a deep clone of value.\n     *\n     * Note: This method is loosely based on the structured clone algorithm and supports cloning arrays,\n     * array buffers, booleans, date objects, maps, numbers, Object objects, regexes, sets, strings, symbols,\n     * and typed arrays. The own enumerable properties of arguments objects are cloned as plain objects. An empty\n     * object is returned for uncloneable values such as error objects, functions, DOM nodes, and WeakMaps.\n     *\n     * @param value The value to recursively clone.\n     * @return Returns the deep cloned value.\n     */cloneDeep:function cloneDeep(value){return _.cloneDeep(value);},/**\n     * Helper method for getting values from object in a safe way.\n     * @param {Object} object The object to query.\n     * @param {string[]|string} keyPath The path of the property to get.\n     */get:function get(object,keyPath){if(_.isString(keyPath)||_.isArray(keyPath)){return _.get(object,keyPath);}else{throw new Error(\"Illegal argument keyPath: \".concat(keyPath,\" | object: \").concat(object));}},/**\n     * Helper method for getting/setting state.input.active, can be used to control an edit-mode or the like!\n     */inputActive:function inputActive(value){return _this.op.input('active',value);},/**\n     * Helper method for toggling the state.input.active value.\n     */inputActiveToggle:function inputActiveToggle(){return _this.op.input('active',!!!_this.op.input('active'));},/**\n     * Helper method for getting/setting state.input values, same API as\n     * this.op.state() but keyPath is auto-prefixed with 'input'.\n     */input:function input(keyPath,value){keyPath=keyPath?'input.'+keyPath:'input';return _this.op.state(keyPath,value);},/**\n     * Helper method for getting state.input-values, or return defaultValue if state.input-value is undefined.\n     */inputOr:function inputOr(keyPath,defaultValue){var stateValue=_this.op.input(keyPath);if(stateValue!==undefined){return stateValue;}else{return defaultValue;}},/**\n     * Helper method for getting state.input-values, or return null for all falsy-values.\n     */inputOrNull:function inputOrNull(keyPath){var stateValue=_this.op.input(keyPath);if(stateValue===undefined||!!stateValue){// if undefined or truthy we return stateValue\nreturn stateValue;}else{// if NOT undefined and falsy we return null\nreturn null;}},/**\n     * Helper method for getting/setting state.dialog values, same API as\n     * this.op.state() but keyPath is auto-prefixed with 'dialog'.\n     * This method also supports single object-argument to set entire object of state.dialog\n     */dialog:function dialog(keyPath,value){if(_.isObject(keyPath)){value=keyPath;keyPath='';}keyPath=keyPath?'dialog.'+keyPath:'dialog';return _this.op.state(keyPath,value);},/**\n     * Helper method for getting and setting values on state in a safe way.\n     * @param {string[]|string} keyPath The path of the property to get or set.\n     * @param {object} [value] The new value of the property, if supplied.\n     */state:function state(keyPath,value){if(value===undefined){// Getter functionality\nif(_.isString(keyPath)||_.isArray(keyPath)){return _.get(_this.state,keyPath);}else{throw new Error(\"Illegal argument keyPath: \".concat(keyPath));}}else{// Setter functionality\nif(_.isString(keyPath)||_.isArray(keyPath)){if(!_this._unmounted){// TODO do we need to optimise this code?\n_this.setState(function(state,_props){var newState=_.cloneDeep(state);// spread-operator results in corrupted state\n_.set(newState,keyPath,value);return newState;});}else{// // Only log in dev\n// if (process.env.NODE_ENV !== 'production') {\n//   this.op.log('BLOCKED op.state-setter when _unmounted = true')\n// }\n}}else{throw new Error(\"Illegal argument keyPath: \".concat(keyPath));}}},/**\n     * Helper method for getting state-values, or return defaultValue if state-value is undefined.\n     */stateOr:function stateOr(keyPath,defaultValue){var stateValue=_this.op.state(keyPath);if(stateValue!==undefined){return stateValue;}else{return defaultValue;}},/**\n     * Helper method for getting values from props in a safe way.\n     * @param {string[]|string} keyPath The path of the property to get.\n     */props:function props(keyPath){if(_.isString(keyPath)||_.isArray(keyPath)){return _.get(_this.props,keyPath);}else{throw new Error(\"Illegal argument keyPath: \".concat(keyPath));}}};_this.input={/**\n     * Helper method for getting values on state in a safe way.\n     * @param {string[]|string} keyPath The path of the property to get or set.\n     * @returns {any} Returns value that keyPath references.\n     */stateGet:function stateGet(keyPath){if(_.isString(keyPath)||_.isArray(keyPath)){return _.get(_this.state,keyPath);}else{throw new Error(\"Illegal argument keyPath: \".concat(keyPath));}},/**\n     * Helper method for setting values on state in a safe way.\n     * @param {string[]|string} keyPath The path of the property to get or set.\n     * @param {any} value The new value of the property, if supplied.\n     */stateSet:function stateSet(keyPath,value){// Setter functionality\nif(_.isString(keyPath)||_.isArray(keyPath)){if(!_this._unmounted){// TODO do we need to optimise this code?\n_this.setState(function(state,_props){var newState=_.cloneDeep(state);// spread-operator results in corrupted state\n_.set(newState,keyPath,value);return newState;});}else{// Only log in dev\nif(process.env.NODE_ENV!=='production'){_this.op.log('BLOCKED input.stateSet() when _unmounted = true');}}}else{throw new Error(\"Illegal argument keyPath: \".concat(keyPath));}},/**\n     * Helper method for getting state.input values, or return defaultValue if state.input-value is undefined.\n     * @param {string[]|string} keyPath The path of the property to get or set.\n     * @param {any} defaultValue The default value that will be returned if keyPath points to an undefined object.\n     * @returns {any} Returns value that keyPath references, if value referenced by keyPath is undefined defaultValue will be returned.\n     */get:function get(keyPath,defaultValue){keyPath=keyPath?'input.'+keyPath:'input';var stateValue=_this.input.stateGet(keyPath);if(stateValue!==undefined){return stateValue;}else{return defaultValue;}},/**\n     * Helper method for setting state.input values, same API as this.op.stateSet() but keyPath is auto-prefixed with 'input'.\n     * @param {string[]|string} keyPath The path of the property to get or set.\n     * @param {any} value The new value of the property, if supplied.\n     */set:function set(keyPath,value){keyPath=keyPath?'input.'+keyPath:'input';return _this.input.stateSet(keyPath,value);},/**\n     * Helper method for casting a value to an Integer.\n     * @param {any} intValue The value that will be converted to an Integer.\n     * @param {number} defaultValue The default value that will be returned if intValue can not be converted to an Integer.\n     * @returns {number|undefined} Returns a number, returns undefined if intValue and defaultValue is undefined.\n     */castInt:function castInt(intValue,defaultValue){var parsedInt=parseInt(intValue,10);if(isNaN(parsedInt)){var parsedDefaultValue=parseInt(defaultValue,10);if(isNaN(parsedDefaultValue)){return undefined;}else{return parsedDefaultValue;}}else{return parsedInt;}},/**\n     * Helper method for getting state.input-values as Integers, or return defaultValue as Integer if state.input-value is undefined.\n     * @param {string[]|string} keyPath The path of the property to get or set.\n     * @param {any} defaultValue The default value that will be returned if keyPath points to an undefined object.\n     * @returns {number|undefined} Returns a number, returns undefined if keyPath-value and defaultValue can not be converted to an Integer.\n     */int:function int(keyPath,defaultValue){return _this.input.castInt(_this.input.get(keyPath),defaultValue);},/**\n     * Helper method for casting a value to a Float.\n     * @param {any} floatValue The value that will be converted to a Float.\n     * @param {number} defaultValue The default value that will be returned if floatValue can not be converted to a Float.\n     * @returns {number|undefined} Returns a number, returns undefined if floatValue and defaultValue can not be converted to a Float.\n     */castFloat:function castFloat(floatValue,defaultValue){if(typeof floatValue==='number'){return floatValue;}var parsedFloat=parseFloat(floatValue);if(isNaN(parsedFloat)){if(typeof defaultValue==='number'){return defaultValue;}var parsedDefaultValue=parseFloat(defaultValue);if(isNaN(parsedDefaultValue)){return undefined;}else{return parsedDefaultValue;}}else{return parsedFloat;}},/**\n     * Helper method for getting state.input-values as Floats, or return defaultValue as Float if state.input-value is undefined.\n     * @param {string[]|string} keyPath The path of the property to get or set.\n     * @param {any} defaultValue The default value that will be returned if keyPath points to an undefined object.\n     * @returns {number|undefined} Returns a number, returns undefined if keyPath-value and defaultValue can not be converted to a Float.\n     */float:function float(keyPath,defaultValue){return _this.input.castFloat(_this.input.get(keyPath),defaultValue);},/**\n     * Helper method for casting a value to a String.\n     * @param {any} stringValue The value that will be converted to a String.\n     * @param {any} defaultValue The default value that will be returned if stringValue can not be converted to a String.\n     * @returns {string|null|undefined} Returns a string or null, returns undefined if stringValue and defaultValue is undefined.\n     */castString:function castString(stringValue,defaultValue){if(typeof stringValue==='string'){return stringValue;}else if(stringValue===undefined){if(typeof defaultValue==='string'){return defaultValue;}else if(defaultValue===undefined){return undefined;}else if(defaultValue===null){return null;}else{return String(defaultValue);}}else if(stringValue===null){return null;}else{return String(stringValue);}},/**\n     * Helper method for getting state.input-values as Strings, or return defaultValue as String if state.input-value is undefined.\n     * @param {string[]|string} keyPath The path of the property to get or set.\n     * @param {any} defaultValue The default value that will be returned if keyPath points to an undefined object.\n     * @returns {string|null|undefined} Returns a string or null, returns undefined if keyPath points to undefined object and defaultValue is undefined.\n     */string:function string(keyPath,defaultValue){return _this.input.castString(_this.input.get(keyPath),defaultValue);}};return _this;}_createClass(MountableComponent,[{key:\"componentDidMount\",value:function componentDidMount(){this._unmounted=false;// console.log('MountableComponent._unmounted:', this._unmounted)\n}/**\n   * https://reactjs.org/docs/react-component.html#componentwillunmount\n   * componentWillUnmount() is invoked immediately before a component is unmounted and destroyed.\n   * Perform any necessary cleanup in this method, such as invalidating timers,\n   * canceling network requests, or cleaning up any subscriptions that were created in componentDidMount().\n   *\n   * You should not call setState() in componentWillUnmount() because the component will never be re-rendered.\n   * Once a component instance is unmounted, it will never be mounted again.\n   */},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this._unmounted=true;// console.log('MountableComponent._unmounted:', this._unmounted)\n}}]);return MountableComponent;}(Component);","map":{"version":3,"sources":["/Users/maxmagnusson/Desktop/landing-react/src/_components/MountableComponent.jsx"],"names":["_","Component","MountableComponent","_unmounted","op","log","value1","value2","value3","value4","value5","undefined","console","__proto__","constructor","name","state","warn","equal","firstValue","secondValue","isEqual","cloneDeep","value","get","object","keyPath","isString","isArray","Error","inputActive","input","inputActiveToggle","inputOr","defaultValue","stateValue","inputOrNull","dialog","isObject","setState","_props","newState","set","stateOr","props","stateGet","stateSet","process","env","NODE_ENV","castInt","intValue","parsedInt","parseInt","isNaN","parsedDefaultValue","int","castFloat","floatValue","parsedFloat","parseFloat","float","castString","stringValue","String","string"],"mappings":"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","sourcesContent":["import _ from 'lodash'\nimport { Component } from 'react'\n\nexport class MountableComponent extends Component {\n  _unmounted = true\n\n  op = {\n    log: (value1, value2, value3, value4, value5) => {\n      if (value1 === undefined) {\n        console.log(this.__proto__.constructor.name, this.state)\n      } else if (value2 === undefined) {\n        console.log(this.__proto__.constructor.name, value1)\n      } else if (value3 === undefined) {\n        console.log(this.__proto__.constructor.name, value1, value2)\n      } else if (value4 === undefined) {\n        console.log(this.__proto__.constructor.name, value1, value2, value3)\n      } else if (value5 === undefined) {\n        console.log(\n          this.__proto__.constructor.name,\n          value1,\n          value2,\n          value3,\n          value4\n        )\n      } else {\n        console.warn(\n          this.__proto__.constructor.name,\n          'MAX_ARGS',\n          value1,\n          value2,\n          value3,\n          value4,\n          value5\n        )\n      }\n    },\n    /**\n     * Performs a deep comparison between two values to determine if they are equivalent.\n     * @param firstValue The first value to compare.\n     * @param secondValue The second value to compare.\n     */\n    equal: (firstValue, secondValue) => {\n      return _.isEqual(firstValue, secondValue)\n    },\n    /**\n     * Creates a deep clone of value.\n     *\n     * Note: This method is loosely based on the structured clone algorithm and supports cloning arrays,\n     * array buffers, booleans, date objects, maps, numbers, Object objects, regexes, sets, strings, symbols,\n     * and typed arrays. The own enumerable properties of arguments objects are cloned as plain objects. An empty\n     * object is returned for uncloneable values such as error objects, functions, DOM nodes, and WeakMaps.\n     *\n     * @param value The value to recursively clone.\n     * @return Returns the deep cloned value.\n     */\n    cloneDeep: value => {\n      return _.cloneDeep(value)\n    },\n    /**\n     * Helper method for getting values from object in a safe way.\n     * @param {Object} object The object to query.\n     * @param {string[]|string} keyPath The path of the property to get.\n     */\n    get: (object, keyPath) => {\n      if (_.isString(keyPath) || _.isArray(keyPath)) {\n        return _.get(object, keyPath)\n      } else {\n        throw new Error(\n          `Illegal argument keyPath: ${keyPath} | object: ${object}`\n        )\n      }\n    },\n    /**\n     * Helper method for getting/setting state.input.active, can be used to control an edit-mode or the like!\n     */\n    inputActive: value => {\n      return this.op.input('active', value)\n    },\n    /**\n     * Helper method for toggling the state.input.active value.\n     */\n    inputActiveToggle: () => {\n      return this.op.input('active', !!!this.op.input('active'))\n    },\n    /**\n     * Helper method for getting/setting state.input values, same API as\n     * this.op.state() but keyPath is auto-prefixed with 'input'.\n     */\n    input: (keyPath, value) => {\n      keyPath = keyPath ? 'input.' + keyPath : 'input'\n      return this.op.state(keyPath, value)\n    },\n    /**\n     * Helper method for getting state.input-values, or return defaultValue if state.input-value is undefined.\n     */\n    inputOr: (keyPath, defaultValue) => {\n      const stateValue = this.op.input(keyPath)\n      if (stateValue !== undefined) {\n        return stateValue\n      } else {\n        return defaultValue\n      }\n    },\n    /**\n     * Helper method for getting state.input-values, or return null for all falsy-values.\n     */\n    inputOrNull: keyPath => {\n      const stateValue = this.op.input(keyPath)\n      if (stateValue === undefined || !!stateValue) {\n        // if undefined or truthy we return stateValue\n        return stateValue\n      } else {\n        // if NOT undefined and falsy we return null\n        return null\n      }\n    },\n    /**\n     * Helper method for getting/setting state.dialog values, same API as\n     * this.op.state() but keyPath is auto-prefixed with 'dialog'.\n     * This method also supports single object-argument to set entire object of state.dialog\n     */\n    dialog: (keyPath, value) => {\n      if (_.isObject(keyPath)) {\n        value = keyPath\n        keyPath = ''\n      }\n      keyPath = keyPath ? 'dialog.' + keyPath : 'dialog'\n      return this.op.state(keyPath, value)\n    },\n    /**\n     * Helper method for getting and setting values on state in a safe way.\n     * @param {string[]|string} keyPath The path of the property to get or set.\n     * @param {object} [value] The new value of the property, if supplied.\n     */\n    state: (keyPath, value) => {\n      if (value === undefined) {\n        // Getter functionality\n        if (_.isString(keyPath) || _.isArray(keyPath)) {\n          return _.get(this.state, keyPath)\n        } else {\n          throw new Error(`Illegal argument keyPath: ${keyPath}`)\n        }\n      } else {\n        // Setter functionality\n        if (_.isString(keyPath) || _.isArray(keyPath)) {\n          if (!this._unmounted) {\n            // TODO do we need to optimise this code?\n            this.setState((state, _props) => {\n              const newState = _.cloneDeep(state) // spread-operator results in corrupted state\n              _.set(newState, keyPath, value)\n              return newState\n            })\n          } else {\n            // // Only log in dev\n            // if (process.env.NODE_ENV !== 'production') {\n            //   this.op.log('BLOCKED op.state-setter when _unmounted = true')\n            // }\n          }\n        } else {\n          throw new Error(`Illegal argument keyPath: ${keyPath}`)\n        }\n      }\n    },\n    /**\n     * Helper method for getting state-values, or return defaultValue if state-value is undefined.\n     */\n    stateOr: (keyPath, defaultValue) => {\n      const stateValue = this.op.state(keyPath)\n      if (stateValue !== undefined) {\n        return stateValue\n      } else {\n        return defaultValue\n      }\n    },\n    /**\n     * Helper method for getting values from props in a safe way.\n     * @param {string[]|string} keyPath The path of the property to get.\n     */\n    props: keyPath => {\n      if (_.isString(keyPath) || _.isArray(keyPath)) {\n        return _.get(this.props, keyPath)\n      } else {\n        throw new Error(`Illegal argument keyPath: ${keyPath}`)\n      }\n    }\n  }\n\n  input = {\n    /**\n     * Helper method for getting values on state in a safe way.\n     * @param {string[]|string} keyPath The path of the property to get or set.\n     * @returns {any} Returns value that keyPath references.\n     */\n    stateGet: keyPath => {\n      if (_.isString(keyPath) || _.isArray(keyPath)) {\n        return _.get(this.state, keyPath)\n      } else {\n        throw new Error(`Illegal argument keyPath: ${keyPath}`)\n      }\n    },\n    /**\n     * Helper method for setting values on state in a safe way.\n     * @param {string[]|string} keyPath The path of the property to get or set.\n     * @param {any} value The new value of the property, if supplied.\n     */\n    stateSet: (keyPath, value) => {\n      // Setter functionality\n      if (_.isString(keyPath) || _.isArray(keyPath)) {\n        if (!this._unmounted) {\n          // TODO do we need to optimise this code?\n          this.setState((state, _props) => {\n            const newState = _.cloneDeep(state) // spread-operator results in corrupted state\n            _.set(newState, keyPath, value)\n            return newState\n          })\n        } else {\n          // Only log in dev\n          if (process.env.NODE_ENV !== 'production') {\n            this.op.log('BLOCKED input.stateSet() when _unmounted = true')\n          }\n        }\n      } else {\n        throw new Error(`Illegal argument keyPath: ${keyPath}`)\n      }\n    },\n    /**\n     * Helper method for getting state.input values, or return defaultValue if state.input-value is undefined.\n     * @param {string[]|string} keyPath The path of the property to get or set.\n     * @param {any} defaultValue The default value that will be returned if keyPath points to an undefined object.\n     * @returns {any} Returns value that keyPath references, if value referenced by keyPath is undefined defaultValue will be returned.\n     */\n    get: (keyPath, defaultValue) => {\n      keyPath = keyPath ? 'input.' + keyPath : 'input'\n      const stateValue = this.input.stateGet(keyPath)\n      if (stateValue !== undefined) {\n        return stateValue\n      } else {\n        return defaultValue\n      }\n    },\n    /**\n     * Helper method for setting state.input values, same API as this.op.stateSet() but keyPath is auto-prefixed with 'input'.\n     * @param {string[]|string} keyPath The path of the property to get or set.\n     * @param {any} value The new value of the property, if supplied.\n     */\n    set: (keyPath, value) => {\n      keyPath = keyPath ? 'input.' + keyPath : 'input'\n      return this.input.stateSet(keyPath, value)\n    },\n    /**\n     * Helper method for casting a value to an Integer.\n     * @param {any} intValue The value that will be converted to an Integer.\n     * @param {number} defaultValue The default value that will be returned if intValue can not be converted to an Integer.\n     * @returns {number|undefined} Returns a number, returns undefined if intValue and defaultValue is undefined.\n     */\n    castInt: (intValue, defaultValue) => {\n      const parsedInt = parseInt(intValue, 10)\n      if (isNaN(parsedInt)) {\n        const parsedDefaultValue = parseInt(defaultValue, 10)\n        if (isNaN(parsedDefaultValue)) {\n          return undefined\n        } else {\n          return parsedDefaultValue\n        }\n      } else {\n        return parsedInt\n      }\n    },\n    /**\n     * Helper method for getting state.input-values as Integers, or return defaultValue as Integer if state.input-value is undefined.\n     * @param {string[]|string} keyPath The path of the property to get or set.\n     * @param {any} defaultValue The default value that will be returned if keyPath points to an undefined object.\n     * @returns {number|undefined} Returns a number, returns undefined if keyPath-value and defaultValue can not be converted to an Integer.\n     */\n    int: (keyPath, defaultValue) => {\n      return this.input.castInt(this.input.get(keyPath), defaultValue)\n    },\n    /**\n     * Helper method for casting a value to a Float.\n     * @param {any} floatValue The value that will be converted to a Float.\n     * @param {number} defaultValue The default value that will be returned if floatValue can not be converted to a Float.\n     * @returns {number|undefined} Returns a number, returns undefined if floatValue and defaultValue can not be converted to a Float.\n     */\n    castFloat: (floatValue, defaultValue) => {\n      if (typeof floatValue === 'number') {\n        return floatValue\n      }\n      const parsedFloat = parseFloat(floatValue)\n      if (isNaN(parsedFloat)) {\n        if (typeof defaultValue === 'number') {\n          return defaultValue\n        }\n        const parsedDefaultValue = parseFloat(defaultValue)\n        if (isNaN(parsedDefaultValue)) {\n          return undefined\n        } else {\n          return parsedDefaultValue\n        }\n      } else {\n        return parsedFloat\n      }\n    },\n    /**\n     * Helper method for getting state.input-values as Floats, or return defaultValue as Float if state.input-value is undefined.\n     * @param {string[]|string} keyPath The path of the property to get or set.\n     * @param {any} defaultValue The default value that will be returned if keyPath points to an undefined object.\n     * @returns {number|undefined} Returns a number, returns undefined if keyPath-value and defaultValue can not be converted to a Float.\n     */\n    float: (keyPath, defaultValue) => {\n      return this.input.castFloat(this.input.get(keyPath), defaultValue)\n    },\n    /**\n     * Helper method for casting a value to a String.\n     * @param {any} stringValue The value that will be converted to a String.\n     * @param {any} defaultValue The default value that will be returned if stringValue can not be converted to a String.\n     * @returns {string|null|undefined} Returns a string or null, returns undefined if stringValue and defaultValue is undefined.\n     */\n    castString: (stringValue, defaultValue) => {\n      if (typeof stringValue === 'string') {\n        return stringValue\n      } else if (stringValue === undefined) {\n        if (typeof defaultValue === 'string') {\n          return defaultValue\n        } else if (defaultValue === undefined) {\n          return undefined\n        } else if (defaultValue === null) {\n          return null\n        } else {\n          return String(defaultValue)\n        }\n      } else if (stringValue === null) {\n        return null\n      } else {\n        return String(stringValue)\n      }\n    },\n    /**\n     * Helper method for getting state.input-values as Strings, or return defaultValue as String if state.input-value is undefined.\n     * @param {string[]|string} keyPath The path of the property to get or set.\n     * @param {any} defaultValue The default value that will be returned if keyPath points to an undefined object.\n     * @returns {string|null|undefined} Returns a string or null, returns undefined if keyPath points to undefined object and defaultValue is undefined.\n     */\n    string: (keyPath, defaultValue) => {\n      return this.input.castString(this.input.get(keyPath), defaultValue)\n    }\n  }\n\n  componentDidMount() {\n    this._unmounted = false\n    // console.log('MountableComponent._unmounted:', this._unmounted)\n  }\n\n  /**\n   * https://reactjs.org/docs/react-component.html#componentwillunmount\n   * componentWillUnmount() is invoked immediately before a component is unmounted and destroyed.\n   * Perform any necessary cleanup in this method, such as invalidating timers,\n   * canceling network requests, or cleaning up any subscriptions that were created in componentDidMount().\n   *\n   * You should not call setState() in componentWillUnmount() because the component will never be re-rendered.\n   * Once a component instance is unmounted, it will never be mounted again.\n   */\n  componentWillUnmount() {\n    this._unmounted = true\n    // console.log('MountableComponent._unmounted:', this._unmounted)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}