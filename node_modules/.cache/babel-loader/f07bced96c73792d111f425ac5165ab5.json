{"ast":null,"code":"import _classCallCheck from\"/Users/maxmagnusson/Desktop/landing-react/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/maxmagnusson/Desktop/landing-react/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/maxmagnusson/Desktop/landing-react/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/maxmagnusson/Desktop/landing-react/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/maxmagnusson/Desktop/landing-react/node_modules/@babel/runtime/helpers/esm/inherits\";import{Component}from'react';import _ from'lodash';/**\n * React Component that will handle deep comparison in shouldComponentUpdate.\n */export var PropsComponent=/*#__PURE__*/function(_Component){_inherits(PropsComponent,_Component);function PropsComponent(){_classCallCheck(this,PropsComponent);return _possibleConstructorReturn(this,_getPrototypeOf(PropsComponent).apply(this,arguments));}_createClass(PropsComponent,[{key:\"shouldComponentUpdate\",// TODO MAYBE have custom key: _componentUpdateFingerprint, and if this key is set then it will be used for determening if a component should update or not\n// TODO MAYBE NOT because child-state will be irrelevant with this solution, and break component design.\nvalue:function shouldComponentUpdate(nextProps){// const className = this.__proto__.constructor.name\n// console.log(className + '.shouldComponentUpdate', {\n//   changedProps: !this.isEqual(nextProps, this.props),\n//   prevProps: this.props,\n//   nextProps: nextProps\n// })\n// const timestamp = Date.now()\nif(!this.isEqual(nextProps,this.props)){// console.log(className + `.isEqual took: ${Date.now() - timestamp} ms`)\nreturn true;}// console.log(className + `.isEqual took: ${Date.now() - timestamp} ms`)\nreturn false;}},{key:\"isEqual\",value:function isEqual(firstObject,secondObject){return _.isEqual(firstObject,secondObject);}}]);return PropsComponent;}(Component);","map":{"version":3,"sources":["/Users/maxmagnusson/Desktop/landing-react/src/_components/base/PropsComponent.jsx"],"names":["Component","_","PropsComponent","nextProps","isEqual","props","firstObject","secondObject"],"mappings":"0nBAAA,OAASA,SAAT,KAA0B,OAA1B,CACA,MAAOC,CAAAA,CAAP,KAAc,QAAd,CAEA;;GAGA,UAAaC,CAAAA,cAAb,gSACE;AACA;AAFF,qCAGwBC,SAHxB,CAGmC,CAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAI,CAAC,KAAKC,OAAL,CAAaD,SAAb,CAAwB,KAAKE,KAA7B,CAAL,CAA0C,CACxC;AACA,MAAO,KAAP,CACD,CACD;AACA,MAAO,MAAP,CACD,CAjBH,wCAmBUC,WAnBV,CAmBuBC,YAnBvB,CAmBqC,CACjC,MAAON,CAAAA,CAAC,CAACG,OAAF,CAAUE,WAAV,CAAuBC,YAAvB,CAAP,CACD,CArBH,4BAAoCP,SAApC","sourcesContent":["import { Component } from 'react'\nimport _ from 'lodash'\n\n/**\n * React Component that will handle deep comparison in shouldComponentUpdate.\n */\nexport class PropsComponent extends Component {\n  // TODO MAYBE have custom key: _componentUpdateFingerprint, and if this key is set then it will be used for determening if a component should update or not\n  // TODO MAYBE NOT because child-state will be irrelevant with this solution, and break component design.\n  shouldComponentUpdate(nextProps) {\n    // const className = this.__proto__.constructor.name\n    // console.log(className + '.shouldComponentUpdate', {\n    //   changedProps: !this.isEqual(nextProps, this.props),\n    //   prevProps: this.props,\n    //   nextProps: nextProps\n    // })\n    // const timestamp = Date.now()\n    if (!this.isEqual(nextProps, this.props)) {\n      // console.log(className + `.isEqual took: ${Date.now() - timestamp} ms`)\n      return true\n    }\n    // console.log(className + `.isEqual took: ${Date.now() - timestamp} ms`)\n    return false\n  }\n\n  isEqual(firstObject, secondObject) {\n    return _.isEqual(firstObject, secondObject)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}